{"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Swift-Rex provides seamless integration with SwiftUI through the ","type":"text"},{"type":"codeVoice","code":"ObservableStore"},{"text":" class and various property wrappers. This integration allows you to use Swift-Rex’s state management system while taking advantage of SwiftUI’s reactive UI framework.","type":"text"}]},{"level":2,"anchor":"ObservableStore","type":"heading","text":"ObservableStore"},{"level":3,"anchor":"Basic-Usage","type":"heading","text":"Basic Usage"},{"type":"paragraph","inlineContent":[{"code":"ObservableStore","type":"codeVoice"},{"text":" is an ","type":"text"},{"code":"ObservableObject","type":"codeVoice"},{"text":" that wraps a Swift-Rex ","type":"text"},{"code":"Store","type":"codeVoice"},{"text":", making it compatible with SwiftUI’s reactive system.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import Rex","","struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","","    var body: some View {","        VStack(spacing: 20) {","            Text(\"Count: \\(store.state.count)\")","                .font(.title)","","            HStack(spacing: 12) {","                Button(\"+1\") { store.send(.increment) }","                Button(\"-1\") { store.send(.decrement) }","            }","","            Button(\"Load Data\") {","                store.send(.loadData)","            }","            .disabled(store.state.isLoading)","        }","        .padding()","    }","}"]},{"level":3,"anchor":"Store-Initialization","type":"heading","text":"Store Initialization"},{"type":"paragraph","inlineContent":[{"text":"Create the store in your app’s entry point:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@main","struct MyApp: App {","    let store = Store(","        initialState: AppState(),","        reducer: AppReducer()","    ) {","        LoggingMiddleware()","    }","","    var body: some Scene {","        WindowGroup {","            ContentView(store: ObservableStore(store: store))","        }","    }","}"]},{"level":2,"anchor":"Property-Wrappers","type":"heading","text":"Property Wrappers"},{"level":3,"anchor":"StateObject","type":"heading","text":"@StateObject"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" for the root view that owns the store:"}],"type":"paragraph"},{"code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        \/\/ Your UI here","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"@ObservedObject","type":"heading","anchor":"ObservedObject"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" for child views that receive the store:"}],"type":"paragraph"},{"code":["struct ChildView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Button(\"Increment\") {","            store.send(.increment)","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"State Access","type":"heading","anchor":"State-Access"},{"level":3,"text":"Direct State Access","type":"heading","anchor":"Direct-State-Access"},{"inlineContent":[{"text":"Access state properties directly through the store:","type":"text"}],"type":"paragraph"},{"code":["struct UserProfileView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        VStack {","            if let user = store.state.user {","                Text(\"Welcome, \\(user.name)\")","                Text(\"Email: \\(user.email)\")","            } else {","                Text(\"Please log in\")","            }","            ","            if store.state.isLoading {","                ProgressView()","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Computed Properties","type":"heading","anchor":"Computed-Properties"},{"inlineContent":[{"type":"text","text":"Use computed properties for derived state:"}],"type":"paragraph"},{"code":["struct TodoListView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    private var filteredTodos: [Todo] {","        switch store.state.todo.filter {","        case .all:","            return store.state.todo.todos","        case .completed:","            return store.state.todo.todos.filter { $0.isCompleted }","        case .incomplete:","            return store.state.todo.todos.filter { !$0.isCompleted }","        }","    }","    ","    var body: some View {","        List(filteredTodos, id: \\.id) { todo in","            TodoRowView(todo: todo) {","                store.send(.todo(.toggle(todo.id)))","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Action Dispatching","type":"heading","anchor":"Action-Dispatching"},{"level":3,"text":"Simple Actions","type":"heading","anchor":"Simple-Actions"},{"inlineContent":[{"type":"text","text":"Dispatch actions directly from UI events:"}],"type":"paragraph"},{"code":["Button(\"Increment\") {","    store.send(.increment)","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Actions with Parameters","type":"heading","anchor":"Actions-with-Parameters"},{"inlineContent":[{"type":"text","text":"Pass data to actions:"}],"type":"paragraph"},{"code":["TextField(\"Todo title\", text: $todoText)","    .onSubmit {","        store.send(.todo(.add(todoText)))","        todoText = \"\"","    }"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Conditional Actions","type":"heading","anchor":"Conditional-Actions"},{"inlineContent":[{"text":"Dispatch actions based on conditions:","type":"text"}],"type":"paragraph"},{"code":["Button(\"Save\") {","    if store.state.user != nil {","        store.send(.saveUser)","    } else {","        store.send(.showError(\"User not found\"))","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Loading and Error States","type":"heading","anchor":"Loading-and-Error-States"},{"level":3,"text":"Loading States","type":"heading","anchor":"Loading-States"},{"inlineContent":[{"type":"text","text":"Handle loading states in your UI:"}],"type":"paragraph"},{"code":["struct DataView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Group {","            if store.state.isLoading {","                VStack {","                    ProgressView()","                    Text(\"Loading data...\")","                }","            } else {","                DataContentView(store: store)","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Error Handling","type":"heading","anchor":"Error-Handling"},{"inlineContent":[{"text":"Display and handle errors:","type":"text"}],"type":"paragraph"},{"code":["struct ErrorView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Group {","            if let error = store.state.errorMessage {","                VStack {","                    Text(\"Error\")","                        .font(.headline)","                        .foregroundColor(.red)","                    ","                    Text(error)","                        .multilineTextAlignment(.center)","                    ","                    Button(\"Dismiss\") {","                        store.send(.clearError)","                    }","                }","                .padding()","                .background(Color(.systemGray6))","                .cornerRadius(10)","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Event Bus Integration","type":"heading","anchor":"Event-Bus-Integration"},{"level":3,"text":"Subscribing to Events","type":"heading","anchor":"Subscribing-to-Events"},{"inlineContent":[{"type":"text","text":"Use the EventBus for cross-component communication:"}],"type":"paragraph"},{"code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    @State private var cancellables: Set<AnyCancellable> = []","    @State private var eventLog: [String] = []","    ","    var body: some View {","        VStack {","            \/\/ Your main UI","            MainView(store: store)","            ","            \/\/ Event log","            ScrollView {","                LazyVStack(alignment: .leading, spacing: 4) {","                    ForEach(eventLog, id: \\.self) { log in","                        Text(log)","                            .font(.caption)","                    }","                }","            }","            .frame(maxHeight: 200)","        }","        .onAppear {","            setupEventListeners()","        }","    }","    ","    private func setupEventListeners() {","        Task { @MainActor in","            store.getEventBus().subscribe { event in","                eventLog.insert(\"Event: \\(type(of: event))\", at: 0)","                if eventLog.count > 20 {","                    eventLog.removeLast()","                }","            }","            .store(in: &cancellables)","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Publishing Events","type":"heading","anchor":"Publishing-Events"},{"inlineContent":[{"type":"text","text":"Publish events from your UI:"}],"type":"paragraph"},{"code":["Button(\"Send Notification\") {","    Task { @MainActor in","        store.getEventBus().publish(","            NotificationEvent(","                title: \"User Action\",","                message: \"Button was tapped\"","            )","        )","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Custom AppStore","type":"heading","anchor":"Custom-AppStore"},{"level":3,"text":"Creating a Custom Store","type":"heading","anchor":"Creating-a-Custom-Store"},{"inlineContent":[{"text":"For more complex applications, you can create a custom ","type":"text"},{"code":"AppStore","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"code":["@MainActor","class AppStore: ObservableObject {","    @Published var state: AppState","    let store: Store<AppReducer>","","    init(store: Store<AppReducer>) {","        self.store = store","        self.state = store.state","","        store.subscribe { [weak self] newState in","            Task { @MainActor in","                self?.state = newState","            }","        }","    }","","    func send(_ action: AppAction) {","        store.dispatch(action)","    }","    ","    func getEventBus() -> EventBus {","        return store.getEventBus()","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"Using Custom Store","type":"heading","anchor":"Using-Custom-Store"},{"inlineContent":[{"text":"Use your custom store in SwiftUI views:","type":"text"}],"type":"paragraph"},{"code":["struct ContentView: View {","    @ObservedObject var store: AppStore","    ","    var body: some View {","        VStack {","            Text(\"Count: \\(store.state.count)\")","            Button(\"Increment\") {","                store.send(.increment)","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Best Practices","type":"heading","anchor":"Best-Practices"},{"level":3,"text":"1. Use @StateObject for Root Views","type":"heading","anchor":"1-Use-StateObject-for-Root-Views"},{"inlineContent":[{"type":"text","text":"Always use "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" for views that own the store:"}],"type":"paragraph"},{"code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"2. Use @ObservedObject for Child Views","type":"heading","anchor":"2-Use-ObservedObject-for-Child-Views"},{"inlineContent":[{"text":"Use ","type":"text"},{"code":"@ObservedObject","type":"codeVoice"},{"text":" for views that receive the store:","type":"text"}],"type":"paragraph"},{"code":["struct ChildView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"3. Keep Views Focused","type":"heading","anchor":"3-Keep-Views-Focused"},{"inlineContent":[{"type":"text","text":"Don’t pass the entire store to every view. Only pass what’s needed:"}],"type":"paragraph"},{"code":["\/\/ ❌ Don't pass entire store","struct TodoRowView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        \/\/ Access store.state.todo.todos[index]","    }","}","","\/\/ ✅ Pass only what's needed","struct TodoRowView: View {","    let todo: Todo","    let onToggle: () -> Void","    ","    var body: some View {","        HStack {","            Text(todo.title)","            Spacer()","            Button(\"Toggle\") {","                onToggle()","            }","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"4. Use Computed Properties","type":"heading","anchor":"4-Use-Computed-Properties"},{"inlineContent":[{"type":"text","text":"Use computed properties for derived state:"}],"type":"paragraph"},{"code":["struct TodoListView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    private var completedTodos: [Todo] {","        store.state.todo.todos.filter { $0.isCompleted }","    }","    ","    var body: some View {","        List(completedTodos, id: \\.id) { todo in","            TodoRowView(todo: todo)","        }","    }","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"5. Handle Loading States","type":"heading","anchor":"5-Handle-Loading-States"},{"inlineContent":[{"text":"Always provide loading indicators:","type":"text"}],"type":"paragraph"},{"code":["if store.state.isLoading {","    ProgressView(\"Loading...\")","} else {","    \/\/ Your content","}"],"syntax":"swift","type":"codeListing"},{"level":3,"text":"6. Manage Event Bus Subscriptions","type":"heading","anchor":"6-Manage-Event-Bus-Subscriptions"},{"inlineContent":[{"text":"Always store cancellables to prevent memory leaks:","type":"text"}],"type":"paragraph"},{"code":["@State private var cancellables: Set<AnyCancellable> = []","","store.getEventBus().subscribe { event in","    \/\/ Handle event","}",".store(in: &cancellables)"],"syntax":"swift","type":"codeListing"},{"level":2,"text":"Next Steps","type":"heading","anchor":"Next-Steps"},{"inlineContent":[{"type":"text","text":"Now that you understand SwiftUI integration, explore:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:UIKitIntegration","type":"text"},{"text":" - Learn about UIKit integration","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Rex\/documentation\/Rex\/EventBus","type":"reference","isActive":true},{"type":"text","text":" - Explore cross-component communication"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Rex\/documentation\/Rex\/Middleware","isActive":true,"type":"reference"},{"text":" - Add logging and analytics","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:BestPractices","type":"text"},{"text":" - Advanced patterns and tips","type":"text"}]}]}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/rex\/swiftuiintegration"]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Rex\/documentation\/Rex\/SwiftUIIntegration"},"abstract":[{"type":"text","text":"Learn how to integrate Swift-Rex with SwiftUI applications."}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/Rex\/documentation\/Rex"]]},"metadata":{"role":"article","roleHeading":"Article","title":"SwiftUI Integration","modules":[{"name":"Rex"}]},"references":{"doc://Rex/documentation/Rex":{"abstract":[],"identifier":"doc:\/\/Rex\/documentation\/Rex","type":"topic","kind":"symbol","url":"\/documentation\/rex","title":"Rex","role":"collection"},"doc://Rex/documentation/Rex/EventBus":{"kind":"symbol","title":"EventBus","identifier":"doc:\/\/Rex\/documentation\/Rex\/EventBus","url":"\/documentation\/rex\/eventbus","role":"symbol","navigatorTitle":[{"text":"EventBus","kind":"identifier"}],"type":"topic","abstract":[],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventBus","kind":"identifier"}]},"doc://Rex/documentation/Rex/Middleware":{"role":"symbol","abstract":[],"type":"topic","identifier":"doc:\/\/Rex\/documentation\/Rex\/Middleware","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Middleware"}],"title":"Middleware","kind":"symbol","url":"\/documentation\/rex\/middleware","navigatorTitle":[{"kind":"identifier","text":"Middleware"}]}}}