{"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Rex"}],"title":"SwiftUI Integration"},"sections":[],"hierarchy":{"paths":[["doc:\/\/Rex\/documentation\/Rex"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/rex\/swiftuiintegration"]}],"kind":"article","abstract":[{"text":"Learn how to integrate Swift-Rex with SwiftUI applications.","type":"text"}],"primaryContentSections":[{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift-Rex provides seamless integration with SwiftUI through the "},{"type":"codeVoice","code":"ObservableStore"},{"type":"text","text":" class and various property wrappers. This integration allows you to use Swift-Rex’s state management system while taking advantage of SwiftUI’s reactive UI framework."}]},{"type":"heading","text":"ObservableStore","level":2,"anchor":"ObservableStore"},{"type":"heading","text":"Basic Usage","level":3,"anchor":"Basic-Usage"},{"type":"paragraph","inlineContent":[{"code":"ObservableStore","type":"codeVoice"},{"text":" is an ","type":"text"},{"code":"ObservableObject","type":"codeVoice"},{"text":" that wraps a Swift-Rex ","type":"text"},{"code":"Store","type":"codeVoice"},{"text":", making it compatible with SwiftUI’s reactive system.","type":"text"}]},{"type":"codeListing","code":["import SwiftUI","import Rex","","struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","","    var body: some View {","        VStack(spacing: 20) {","            Text(\"Count: \\(store.state.count)\")","                .font(.title)","","            HStack(spacing: 12) {","                Button(\"+1\") { store.send(.increment) }","                Button(\"-1\") { store.send(.decrement) }","            }","","            Button(\"Load Data\") {","                store.send(.loadData)","            }","            .disabled(store.state.isLoading)","        }","        .padding()","    }","}"],"syntax":"swift"},{"type":"heading","text":"Store Initialization","level":3,"anchor":"Store-Initialization"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the store in your app’s entry point:"}]},{"type":"codeListing","code":["@main","struct MyApp: App {","    let store = Store(","        initialState: AppState(),","        reducer: AppReducer()","    ) {","        LoggingMiddleware()","    }","","    var body: some Scene {","        WindowGroup {","            ContentView(store: ObservableStore(store: store))","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Property Wrappers","level":2,"anchor":"Property-Wrappers"},{"type":"heading","text":"@StateObject","level":3,"anchor":"StateObject"},{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"@StateObject","type":"codeVoice"},{"text":" for the root view that owns the store:","type":"text"}]},{"type":"codeListing","code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        \/\/ Your UI here","    }","}"],"syntax":"swift"},{"type":"heading","text":"@ObservedObject","level":3,"anchor":"ObservedObject"},{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"@ObservedObject","type":"codeVoice"},{"text":" for child views that receive the store:","type":"text"}]},{"type":"codeListing","code":["struct ChildView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Button(\"Increment\") {","            store.send(.increment)","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"State Access","level":2,"anchor":"State-Access"},{"type":"heading","text":"Direct State Access","level":3,"anchor":"Direct-State-Access"},{"type":"paragraph","inlineContent":[{"text":"Access state properties directly through the store:","type":"text"}]},{"type":"codeListing","code":["struct UserProfileView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        VStack {","            if let user = store.state.user {","                Text(\"Welcome, \\(user.name)\")","                Text(\"Email: \\(user.email)\")","            } else {","                Text(\"Please log in\")","            }","            ","            if store.state.isLoading {","                ProgressView()","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Computed Properties","level":3,"anchor":"Computed-Properties"},{"type":"paragraph","inlineContent":[{"text":"Use computed properties for derived state:","type":"text"}]},{"type":"codeListing","code":["struct TodoListView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    private var filteredTodos: [Todo] {","        switch store.state.todo.filter {","        case .all:","            return store.state.todo.todos","        case .completed:","            return store.state.todo.todos.filter { $0.isCompleted }","        case .incomplete:","            return store.state.todo.todos.filter { !$0.isCompleted }","        }","    }","    ","    var body: some View {","        List(filteredTodos, id: \\.id) { todo in","            TodoRowView(todo: todo) {","                store.send(.todo(.toggle(todo.id)))","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Action Dispatching","level":2,"anchor":"Action-Dispatching"},{"type":"heading","text":"Simple Actions","level":3,"anchor":"Simple-Actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dispatch actions directly from UI events:"}]},{"type":"codeListing","code":["Button(\"Increment\") {","    store.send(.increment)","}"],"syntax":"swift"},{"type":"heading","text":"Actions with Parameters","level":3,"anchor":"Actions-with-Parameters"},{"type":"paragraph","inlineContent":[{"text":"Pass data to actions:","type":"text"}]},{"type":"codeListing","code":["TextField(\"Todo title\", text: $todoText)","    .onSubmit {","        store.send(.todo(.add(todoText)))","        todoText = \"\"","    }"],"syntax":"swift"},{"type":"heading","text":"Conditional Actions","level":3,"anchor":"Conditional-Actions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dispatch actions based on conditions:"}]},{"type":"codeListing","code":["Button(\"Save\") {","    if store.state.user != nil {","        store.send(.saveUser)","    } else {","        store.send(.showError(\"User not found\"))","    }","}"],"syntax":"swift"},{"type":"heading","text":"Loading and Error States","level":2,"anchor":"Loading-and-Error-States"},{"type":"heading","text":"Loading States","level":3,"anchor":"Loading-States"},{"type":"paragraph","inlineContent":[{"text":"Handle loading states in your UI:","type":"text"}]},{"type":"codeListing","code":["struct DataView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Group {","            if store.state.isLoading {","                VStack {","                    ProgressView()","                    Text(\"Loading data...\")","                }","            } else {","                DataContentView(store: store)","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Error Handling","level":3,"anchor":"Error-Handling"},{"type":"paragraph","inlineContent":[{"text":"Display and handle errors:","type":"text"}]},{"type":"codeListing","code":["struct ErrorView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Group {","            if let error = store.state.errorMessage {","                VStack {","                    Text(\"Error\")","                        .font(.headline)","                        .foregroundColor(.red)","                    ","                    Text(error)","                        .multilineTextAlignment(.center)","                    ","                    Button(\"Dismiss\") {","                        store.send(.clearError)","                    }","                }","                .padding()","                .background(Color(.systemGray6))","                .cornerRadius(10)","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Event Bus Integration","level":2,"anchor":"Event-Bus-Integration"},{"type":"heading","text":"Subscribing to Events","level":3,"anchor":"Subscribing-to-Events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use the EventBus for cross-component communication:"}]},{"type":"codeListing","code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    @State private var cancellables: Set<AnyCancellable> = []","    @State private var eventLog: [String] = []","    ","    var body: some View {","        VStack {","            \/\/ Your main UI","            MainView(store: store)","            ","            \/\/ Event log","            ScrollView {","                LazyVStack(alignment: .leading, spacing: 4) {","                    ForEach(eventLog, id: \\.self) { log in","                        Text(log)","                            .font(.caption)","                    }","                }","            }","            .frame(maxHeight: 200)","        }","        .onAppear {","            setupEventListeners()","        }","    }","    ","    private func setupEventListeners() {","        Task { @MainActor in","            store.getEventBus().subscribe { event in","                eventLog.insert(\"Event: \\(type(of: event))\", at: 0)","                if eventLog.count > 20 {","                    eventLog.removeLast()","                }","            }","            .store(in: &cancellables)","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Publishing Events","level":3,"anchor":"Publishing-Events"},{"type":"paragraph","inlineContent":[{"text":"Publish events from your UI:","type":"text"}]},{"type":"codeListing","code":["Button(\"Send Notification\") {","    Task { @MainActor in","        store.getEventBus().publish(","            NotificationEvent(","                title: \"User Action\",","                message: \"Button was tapped\"","            )","        )","    }","}"],"syntax":"swift"},{"type":"heading","text":"Custom AppStore","level":2,"anchor":"Custom-AppStore"},{"type":"heading","text":"Creating a Custom Store","level":3,"anchor":"Creating-a-Custom-Store"},{"type":"paragraph","inlineContent":[{"text":"For more complex applications, you can create a custom ","type":"text"},{"type":"codeVoice","code":"AppStore"},{"text":":","type":"text"}]},{"type":"codeListing","code":["@MainActor","class AppStore: ObservableObject {","    @Published var state: AppState","    let store: Store<AppReducer>","","    init(store: Store<AppReducer>) {","        self.store = store","        self.state = store.state","","        store.subscribe { [weak self] newState in","            Task { @MainActor in","                self?.state = newState","            }","        }","    }","","    func send(_ action: AppAction) {","        store.dispatch(action)","    }","    ","    func getEventBus() -> EventBus {","        return store.getEventBus()","    }","}"],"syntax":"swift"},{"type":"heading","text":"Using Custom Store","level":3,"anchor":"Using-Custom-Store"},{"type":"paragraph","inlineContent":[{"text":"Use your custom store in SwiftUI views:","type":"text"}]},{"type":"codeListing","code":["struct ContentView: View {","    @ObservedObject var store: AppStore","    ","    var body: some View {","        VStack {","            Text(\"Count: \\(store.state.count)\")","            Button(\"Increment\") {","                store.send(.increment)","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"Best Practices","level":2,"anchor":"Best-Practices"},{"type":"heading","text":"1. Use @StateObject for Root Views","level":3,"anchor":"1-Use-StateObject-for-Root-Views"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Always use "},{"code":"@StateObject","type":"codeVoice"},{"type":"text","text":" for views that own the store:"}]},{"type":"codeListing","code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    \/\/ ...","}"],"syntax":"swift"},{"type":"heading","text":"2. Use @ObservedObject for Child Views","level":3,"anchor":"2-Use-ObservedObject-for-Child-Views"},{"type":"paragraph","inlineContent":[{"text":"Use ","type":"text"},{"code":"@ObservedObject","type":"codeVoice"},{"text":" for views that receive the store:","type":"text"}]},{"type":"codeListing","code":["struct ChildView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    \/\/ ...","}"],"syntax":"swift"},{"type":"heading","text":"3. Keep Views Focused","level":3,"anchor":"3-Keep-Views-Focused"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Don’t pass the entire store to every view. Only pass what’s needed:"}]},{"type":"codeListing","code":["\/\/ ❌ Don't pass entire store","struct TodoRowView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        \/\/ Access store.state.todo.todos[index]","    }","}","","\/\/ ✅ Pass only what's needed","struct TodoRowView: View {","    let todo: Todo","    let onToggle: () -> Void","    ","    var body: some View {","        HStack {","            Text(todo.title)","            Spacer()","            Button(\"Toggle\") {","                onToggle()","            }","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"4. Use Computed Properties","level":3,"anchor":"4-Use-Computed-Properties"},{"type":"paragraph","inlineContent":[{"text":"Use computed properties for derived state:","type":"text"}]},{"type":"codeListing","code":["struct TodoListView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    private var completedTodos: [Todo] {","        store.state.todo.todos.filter { $0.isCompleted }","    }","    ","    var body: some View {","        List(completedTodos, id: \\.id) { todo in","            TodoRowView(todo: todo)","        }","    }","}"],"syntax":"swift"},{"type":"heading","text":"5. Handle Loading States","level":3,"anchor":"5-Handle-Loading-States"},{"type":"paragraph","inlineContent":[{"text":"Always provide loading indicators:","type":"text"}]},{"type":"codeListing","code":["if store.state.isLoading {","    ProgressView(\"Loading...\")","} else {","    \/\/ Your content","}"],"syntax":"swift"},{"type":"heading","text":"6. Manage Event Bus Subscriptions","level":3,"anchor":"6-Manage-Event-Bus-Subscriptions"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Always store cancellables to prevent memory leaks:"}]},{"type":"codeListing","code":["@State private var cancellables: Set<AnyCancellable> = []","","store.getEventBus().subscribe { event in","    \/\/ Handle event","}",".store(in: &cancellables)"],"syntax":"swift"},{"type":"heading","text":"Next Steps","level":2,"anchor":"Next-Steps"},{"type":"paragraph","inlineContent":[{"text":"Now that you understand SwiftUI integration, explore:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:UIKitIntegration","type":"text"},{"text":" - Learn about UIKit integration","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/Rex\/documentation\/Rex\/EventBus"},{"text":" - Explore cross-component communication","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/Rex\/documentation\/Rex\/Middleware","isActive":true},{"type":"text","text":" - Add logging and analytics"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:BestPractices"},{"type":"text","text":" - Advanced patterns and tips"}]}]}]}]}],"identifier":{"url":"doc:\/\/Rex\/documentation\/Rex\/SwiftUIIntegration","interfaceLanguage":"swift"},"references":{"doc://Rex/documentation/Rex/EventBus":{"kind":"symbol","navigatorTitle":[{"text":"EventBus","kind":"identifier"}],"type":"topic","url":"\/documentation\/rex\/eventbus","title":"EventBus","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventBus","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Rex\/documentation\/Rex\/EventBus"},"doc://Rex/documentation/Rex/Middleware":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Middleware"}],"title":"Middleware","url":"\/documentation\/rex\/middleware","type":"topic","kind":"symbol","identifier":"doc:\/\/Rex\/documentation\/Rex\/Middleware","abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Middleware"}]},"doc://Rex/documentation/Rex":{"role":"collection","type":"topic","abstract":[],"url":"\/documentation\/rex","identifier":"doc:\/\/Rex\/documentation\/Rex","kind":"symbol","title":"Rex"}}}