{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/Rex\/documentation\/Rex\/GettingStarted"},"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This guide will walk you through setting up Swift-Rex in your project and creating a simple counter app to demonstrate the basic concepts."}]},{"anchor":"Installation","text":"Installation","type":"heading","level":2},{"anchor":"Swift-Package-Manager","text":"Swift Package Manager","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Add Swift-Rex to your project using Swift Package Manager:","type":"text"}]},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In Xcode, go to ","type":"text"},{"inlineContent":[{"text":"File","type":"text"}],"type":"strong"},{"text":" > ","type":"text"},{"inlineContent":[{"type":"text","text":"Add Package Dependencies"}],"type":"strong"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Enter the repository URL: "},{"type":"codeVoice","code":"https:\/\/github.com\/pelagornis\/swift-rex.git"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Select the version you want to use"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Click "},{"inlineContent":[{"text":"Add Package","type":"text"}],"type":"strong"}]}]}]},{"anchor":"Manual-Installation","text":"Manual Installation","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"If you prefer to add it manually, add this to your ","type":"text"},{"code":"Package.swift","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["dependencies: [","    .package(url: \"https:\/\/github.com\/pelagornis\/swift-rex.git\", from: \"vTag\")","]"]},{"anchor":"Your-First-Swift-Rex-App","text":"Your First Swift-Rex App","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Let’s create a simple counter app to demonstrate the basic concepts.","type":"text"}]},{"anchor":"1-Define-Your-State","text":"1. Define Your State","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"First, define what your app’s state looks like:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import Rex","","struct AppState: StateType {","    var count: Int = 0","    var isLoading: Bool = false","    var errorMessage: String? = nil","    var lastUpdated: Date = Date()","}"]},{"anchor":"2-Define-Your-Actions","text":"2. Define Your Actions","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Next, define the actions that can change your state:"}]},{"type":"codeListing","syntax":"swift","code":["enum AppAction: ActionType {","    case increment","    case decrement","    case reset","    case setCount(Int)","    case loadFromServer","    case loadedFromServer(Int)","    case showError(String?)","    case clearError","}"]},{"anchor":"3-Create-Your-Reducer","text":"3. Create Your Reducer","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Create a reducer that handles state changes:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct AppReducer: Reducer {","    func reduce(state: inout AppState, action: AppAction) -> [Effect<AppAction>] {","        switch action {","        case .increment:","            state.count += 1","            state.lastUpdated = Date()","            return [.none]","","        case .decrement:","            state.count -= 1","            state.lastUpdated = Date()","            return [.none]","","        case .reset:","            state.count = 0","            state.lastUpdated = Date()","            return [.none]","","        case .setCount(let count):","            state.count = count","            state.lastUpdated = Date()","            return [.none]","","        case .loadFromServer:","            state.isLoading = true","            state.errorMessage = nil","            return [","                Effect { emitter in","                    try? await Task.sleep(nanoseconds: 1_000_000_000)","                    let randomCount = Int.random(in: 1...100)","                    await emitter.send(.loadedFromServer(randomCount))","                }","            ]","","        case .loadedFromServer(let count):","            state.count = count","            state.isLoading = false","            state.lastUpdated = Date()","            return [.none]","","        case .showError(let message):","            state.errorMessage = message","            state.isLoading = false","            state.lastUpdated = Date()","            return [.none]","","        case .clearError:","            state.errorMessage = nil","            state.lastUpdated = Date()","            return [.none]","        }","    }","}"]},{"anchor":"4-Create-Your-Store","text":"4. Create Your Store","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"Create a store that manages your state:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let store = Store(","    initialState: AppState(),","    reducer: AppReducer()",") {","    LoggingMiddleware()","}"]},{"anchor":"5-Use-in-SwiftUI","text":"5. Use in SwiftUI","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a SwiftUI view that uses your store:"}]},{"type":"codeListing","syntax":"swift","code":["import SwiftUI","import Rex","","struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","","    var body: some View {","        VStack(spacing: 20) {","            Text(\"Count: \\(store.state.count)\")","                .font(.title)","","            HStack(spacing: 12) {","                Button(\"+1\") { store.send(.increment) }","                Button(\"-1\") { store.send(.decrement) }","            }","","            Button(\"Reset\") { store.send(.reset) }","","            Button(\"Load from Server\") {","                store.send(.loadFromServer)","            }","            .disabled(store.state.isLoading)","","            if store.state.isLoading {","                ProgressView(\"Loading...\")","            }","","            if let error = store.state.errorMessage {","                Text(error)","                    .foregroundColor(.red)","                    .onTapGesture {","                        store.send(.clearError)","                    }","            }","        }","        .padding()","    }","}","","@main","struct MyApp: App {","    let store = Store(","        initialState: AppState(),","        reducer: AppReducer()","    )","","    var body: some Scene {","        WindowGroup {","            ContentView(store: ObservableStore(store: store))","        }","    }","}"]},{"anchor":"6-Use-in-UIKit","text":"6. Use in UIKit","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"For UIKit, you can use the store directly:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["import UIKit","import Rex","","class ViewController: UIViewController {","    private let store: Store<AppReducer>","    private let label = UILabel()","    private let incrementButton = UIButton(type: .system)","    private let decrementButton = UIButton(type: .system)","","    init(store: Store<AppReducer>) {","        self.store = store","        super.init(nibName: nil, bundle: nil)","","        store.subscribe { [weak self] newState in","            Task { @MainActor in","                self?.updateUI(with: newState)","            }","        }","    }","","    required init?(coder: NSCoder) { fatalError() }","","    override func viewDidLoad() {","        super.viewDidLoad()","        setupUI()","        updateUI(with: store.state)","    }","","    private func setupUI() {","        \/\/ Setup your UI elements here","        incrementButton.addTarget(self, action: #selector(increment), for: .touchUpInside)","        decrementButton.addTarget(self, action: #selector(decrement), for: .touchUpInside)","    }","","    private func updateUI(with state: AppState) {","        label.text = \"Count: \\(state.count)\"","    }","","    @objc private func increment() { store.dispatch(.increment) }","    @objc private func decrement() { store.dispatch(.decrement) }","}"]},{"anchor":"Next-Steps","text":"Next Steps","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that you have a basic understanding of Swift-Rex, explore these topics:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"identifier":"doc:\/\/Rex\/documentation\/Rex\/BasicConcepts","type":"reference","isActive":true},{"type":"text","text":" - Learn about the core concepts"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Rex\/documentation\/Rex\/StateManagement","isActive":true},{"type":"text","text":" - Understand state management patterns"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/Rex\/documentation\/Rex\/SwiftUIIntegration","type":"reference","isActive":true},{"type":"text","text":" - Deep dive into SwiftUI integration"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"doc:UIKitIntegration"},{"type":"text","text":" - Learn about UIKit integration"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"doc:\/\/Rex\/documentation\/Rex\/EventBus","isActive":true},{"type":"text","text":" - Explore cross-component communication"}],"type":"paragraph"}]}]}]}],"metadata":{"modules":[{"name":"Rex"}],"title":"Getting Started","roleHeading":"Article","role":"article"},"hierarchy":{"paths":[["doc:\/\/Rex\/documentation\/Rex"]]},"sections":[],"abstract":[{"type":"text","text":"Learn how to integrate Swift-Rex into your iOS app and create your first state management setup."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/rex\/gettingstarted"]}],"kind":"article","references":{"doc://Rex/documentation/Rex":{"role":"collection","type":"topic","abstract":[],"url":"\/documentation\/rex","identifier":"doc:\/\/Rex\/documentation\/Rex","kind":"symbol","title":"Rex"},"doc://Rex/documentation/Rex/StateManagement":{"title":"State Management","identifier":"doc:\/\/Rex\/documentation\/Rex\/StateManagement","abstract":[{"text":"Learn how to effectively manage application state with Swift-Rex.","type":"text"}],"type":"topic","role":"article","kind":"article","url":"\/documentation\/rex\/statemanagement"},"doc://Rex/documentation/Rex/BasicConcepts":{"url":"\/documentation\/rex\/basicconcepts","identifier":"doc:\/\/Rex\/documentation\/Rex\/BasicConcepts","role":"article","type":"topic","title":"Basic Concepts","kind":"article","abstract":[{"type":"text","text":"Learn the fundamental concepts that make up the Swift-Rex architecture."}]},"doc://Rex/documentation/Rex/SwiftUIIntegration":{"url":"\/documentation\/rex\/swiftuiintegration","kind":"article","role":"article","type":"topic","title":"SwiftUI Integration","identifier":"doc:\/\/Rex\/documentation\/Rex\/SwiftUIIntegration","abstract":[{"type":"text","text":"Learn how to integrate Swift-Rex with SwiftUI applications."}]},"doc://Rex/documentation/Rex/EventBus":{"kind":"symbol","navigatorTitle":[{"text":"EventBus","kind":"identifier"}],"type":"topic","url":"\/documentation\/rex\/eventbus","title":"EventBus","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventBus","kind":"identifier"}],"abstract":[],"identifier":"doc:\/\/Rex\/documentation\/Rex\/EventBus"}}}