{"includedArchiveIdentifiers":["Rex"],"interfaceLanguages":{"swift":[{"children":[{"title":"Articles","type":"groupMarker"},{"path":"\/documentation\/rex\/basicconcepts","title":"Basic Concepts","type":"article"},{"path":"\/documentation\/rex\/gettingstarted","title":"Getting Started","type":"article"},{"path":"\/documentation\/rex\/statemanagement","title":"State Management","type":"article"},{"path":"\/documentation\/rex\/swiftuiintegration","title":"SwiftUI Integration","type":"article"},{"title":"Classes","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/actorisolated\/init(value:)","title":"init(value: Value)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/actorisolated\/withvalue(_:)","title":"func withValue<T>((Value) async throws -> T) async rethrows -> T","type":"method"}],"path":"\/documentation\/rex\/actorisolated","title":"ActorIsolated","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/effectqueue\/init(strategy:dispatch:)","title":"init(strategy: EffectStrategy, dispatch: (Action) -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/effectqueue\/cancelall()","title":"func cancelAll()","type":"method"},{"path":"\/documentation\/rex\/effectqueue\/enqueue(_:key:)","title":"func enqueue(Effect<Action>, key: String?)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/effectqueue\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/rex\/effectqueue\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/rex\/effectqueue\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/rex\/effectqueue\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/rex\/effectqueue","title":"EffectQueue","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/eventbus\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/eventbus\/publish(_:)","title":"func publish(any EventType)","type":"method"},{"path":"\/documentation\/rex\/eventbus\/subscribe(handler:)","title":"func subscribe(handler: (any EventType) -> Void)","type":"method"},{"path":"\/documentation\/rex\/eventbus\/subscribe(to:handler:)","title":"func subscribe<T>(to: T.Type, handler: (T) -> Void)","type":"method"},{"path":"\/documentation\/rex\/eventbus\/subscribe(to:where:handler:)","title":"func subscribe<T>(to: T.Type, where: (T) -> Bool, handler: (T) -> Void)","type":"method"}],"path":"\/documentation\/rex\/eventbus","title":"EventBus","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/middlewarechain\/init(_:)","title":"init([AnyMiddleware<State, Action>])","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/middlewarechain\/append(_:)","title":"func append(AnyMiddleware<State, Action>)","type":"method"},{"path":"\/documentation\/rex\/middlewarechain\/process(state:action:emit:)","title":"func process(state: State, action: Action, emit: (Action) -> Void) async -> [Effect<Action>]","type":"method"}],"path":"\/documentation\/rex\/middlewarechain","title":"MiddlewareChain","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/observablestore\/init(store:)","title":"init(store: Store<R>)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rex\/observablestore\/state","title":"var state: R.State","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/observablestore\/geteventbus()","title":"func getEventBus() -> EventBus","type":"method"},{"path":"\/documentation\/rex\/observablestore\/send(_:)","title":"func send(R.Action)","type":"method"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rex\/observablestore\/objectwillchange","title":"var objectWillChange: ObservableObjectPublisher","type":"property"}],"path":"\/documentation\/rex\/observablestore\/observableobject-implementations","title":"ObservableObject Implementations","type":"symbol"}],"path":"\/documentation\/rex\/observablestore","title":"ObservableStore","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/store\/init(initialstate:reducer:middlewares:eventbus:)","title":"init(initialState: R.State, reducer: R, middlewares: () -> [AnyMiddleware<R.State, R.Action>], eventBus: EventBus)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rex\/store\/state","title":"var state: R.State","type":"property"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/store\/dispatch(_:)","title":"func dispatch(R.Action)","type":"method"},{"path":"\/documentation\/rex\/store\/geteventbus()","title":"func getEventBus() -> EventBus","type":"method"},{"path":"\/documentation\/rex\/store\/getinitialstate()","title":"func getInitialState() -> R.State","type":"method"},{"path":"\/documentation\/rex\/store\/subscribe(_:)","title":"func subscribe((R.State) -> Void)","type":"method"}],"path":"\/documentation\/rex\/store","title":"Store","type":"class"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/timetravelmiddleware\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/timetravelmiddleware\/jumpto(_:)","title":"func jumpTo(Int) async -> State?","type":"method"},{"path":"\/documentation\/rex\/timetravelmiddleware\/process(state:action:emit:)","title":"func process(state: State, action: Action, emit: (Action) -> Void) async -> [Effect<Action>]","type":"method"},{"path":"\/documentation\/rex\/timetravelmiddleware\/record(_:)","title":"func record(State) async","type":"method"},{"path":"\/documentation\/rex\/timetravelmiddleware\/redo()","title":"func redo() async -> State?","type":"method"},{"path":"\/documentation\/rex\/timetravelmiddleware\/undo()","title":"func undo() async -> State?","type":"method"}],"path":"\/documentation\/rex\/timetravelmiddleware","title":"TimeTravelMiddleware","type":"class"},{"children":[{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/timetravelstate\/assertisolated(_:file:line:)","title":"func assertIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"},{"path":"\/documentation\/rex\/timetravelstate\/assumeisolated(_:file:line:)","title":"func assumeIsolated<T>((isolated Self) throws -> T, file: StaticString, line: UInt) rethrows -> T","type":"method"},{"path":"\/documentation\/rex\/timetravelstate\/preconditionisolated(_:file:line:)","title":"func preconditionIsolated(@autoclosure () -> String, file: StaticString, line: UInt)","type":"method"}],"path":"\/documentation\/rex\/timetravelstate\/actor-implementations","title":"Actor Implementations","type":"symbol"}],"path":"\/documentation\/rex\/timetravelstate","title":"TimeTravelState","type":"class"},{"title":"Protocols","type":"groupMarker"},{"path":"\/documentation\/rex\/actiontype","title":"ActionType","type":"protocol"},{"path":"\/documentation\/rex\/eventtype","title":"EventType","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rex\/middleware\/action","title":"Action","type":"associatedtype"},{"path":"\/documentation\/rex\/middleware\/state","title":"State","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/middleware\/process(state:action:emit:)","title":"func process(state: Self.State, action: Self.Action, emit: (Self.Action) -> Void) async -> [Effect<Self.Action>]","type":"method"}],"path":"\/documentation\/rex\/middleware","title":"Middleware","type":"protocol"},{"children":[{"title":"Associated Types","type":"groupMarker"},{"path":"\/documentation\/rex\/reducer\/action","title":"Action","type":"associatedtype"},{"path":"\/documentation\/rex\/reducer\/state","title":"State","type":"associatedtype"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/reducer\/reduce(state:action:)","title":"func reduce(state: inout Self.State, action: Self.Action) -> [Effect<Self.Action>]","type":"method"}],"path":"\/documentation\/rex\/reducer","title":"Reducer","type":"protocol"},{"path":"\/documentation\/rex\/statetype","title":"StateType","type":"protocol"},{"title":"Structures","type":"groupMarker"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/anymiddleware\/init(_:)","title":"init<M>(M)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/anymiddleware\/process(state:action:emit:)","title":"func process(state: State, action: Action, emit: (Action) -> Void) async -> [Effect<Action>]","type":"method"}],"path":"\/documentation\/rex\/anymiddleware","title":"AnyMiddleware","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/effect\/init(_:)","title":"init((EffectEmitter<Action>) async -> Void)","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/effect\/run(dispatch:)","title":"func run(dispatch: (Action) -> Void) async","type":"method"},{"title":"Type Properties","type":"groupMarker"},{"path":"\/documentation\/rex\/effect\/none","title":"static var none: Effect<Action>","type":"property"},{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/effect\/combine(_:)","title":"static func combine(Effect<Action>...) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/concurrent(_:)","title":"static func concurrent(Action...) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/conditional(_:action:)","title":"static func conditional(() -> Bool, action: Action) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/delayed(_:delay:)","title":"static func delayed(Action, delay: TimeInterval) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/just(_:)","title":"static func just(Action) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/many(_:)","title":"static func many(Action...) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/map(_:transform:)","title":"static func map(Action, transform: (Action) -> Action) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/repeating(_:interval:count:)","title":"static func repeating(Effect<Action>, interval: TimeInterval, count: Int?) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/retry(_:maxattempts:delay:shouldretry:onerror:)","title":"static func retry(Effect<Action>, maxAttempts: Int, delay: TimeInterval, shouldRetry: ((any Error)?) -> Bool, onError: (any Error) -> Void) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/retrywitherroraction(_:maxattempts:delay:shouldretry:erroraction:)","title":"static func retryWithErrorAction(Effect<Action>, maxAttempts: Int, delay: TimeInterval, shouldRetry: ((any Error)?) -> Bool, errorAction: (any Error) -> Action) -> Effect<Action>","type":"method"},{"path":"\/documentation\/rex\/effect\/sequence(_:)","title":"static func sequence(Action...) -> Effect<Action>","type":"method"}],"path":"\/documentation\/rex\/effect","title":"Effect","type":"struct"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/effectemitter\/send(_:)","title":"func send(Action)","type":"method"},{"path":"\/documentation\/rex\/effectemitter\/withvalue(_:)","title":"func withValue((EffectEmitter<Action>) async -> Void) async","type":"method"}],"path":"\/documentation\/rex\/effectemitter","title":"EffectEmitter","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/emptymiddleware\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/emptymiddleware\/process(state:action:emit:)","title":"func process(state: State, action: Action, emit: (Action) -> Void) async -> [Effect<Action>]","type":"method"}],"path":"\/documentation\/rex\/emptymiddleware","title":"EmptyMiddleware","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/loggingmiddleware\/init()","title":"init()","type":"init"},{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/loggingmiddleware\/process(state:action:emit:)","title":"func process(state: State, action: Action, emit: (Action) -> Void) async -> [Effect<Action>]","type":"method"}],"path":"\/documentation\/rex\/loggingmiddleware","title":"LoggingMiddleware","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/middlewarebuilder\/buildblock()","title":"static func buildBlock() -> [AnyMiddleware<State, Action>]","type":"method"},{"path":"\/documentation\/rex\/middlewarebuilder\/buildblock(_:)","title":"static func buildBlock<M>(M...) -> [AnyMiddleware<State, Action>]","type":"method"}],"path":"\/documentation\/rex\/middlewarebuilder","title":"MiddlewareBuilder","type":"struct"},{"children":[{"title":"Type Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/reducerbuilder\/buildarray(_:)","title":"static func buildArray([((inout State, Action) -> [Effect<Action>])]) -> (inout State, Action) -> [Effect<Action>]","type":"method"},{"path":"\/documentation\/rex\/reducerbuilder\/buildblock(_:)","title":"static func buildBlock(((inout State, Action) -> [Effect<Action>])...) -> (inout State, Action) -> [Effect<Action>]","type":"method"},{"path":"\/documentation\/rex\/reducerbuilder\/buildeither(first:)","title":"static func buildEither(first: (inout State, Action) -> [Effect<Action>]) -> (inout State, Action) -> [Effect<Action>]","type":"method"},{"path":"\/documentation\/rex\/reducerbuilder\/buildeither(second:)","title":"static func buildEither(second: (inout State, Action) -> [Effect<Action>]) -> (inout State, Action) -> [Effect<Action>]","type":"method"},{"path":"\/documentation\/rex\/reducerbuilder\/buildif(_:)","title":"static func buildIf(((inout State, Action) -> [Effect<Action>])?) -> ((inout State, Action) -> [Effect<Action>])","type":"method"}],"path":"\/documentation\/rex\/reducerbuilder","title":"ReducerBuilder","type":"struct"},{"children":[{"title":"Initializers","type":"groupMarker"},{"path":"\/documentation\/rex\/storeobject\/init(wrappedvalue:)","title":"init(wrappedValue: @autoclosure () -> ObjectType)","type":"init"},{"title":"Instance Properties","type":"groupMarker"},{"path":"\/documentation\/rex\/storeobject\/projectedvalue","title":"var projectedValue: ObservedObject<ObjectType>.Wrapper","type":"property"},{"path":"\/documentation\/rex\/storeobject\/wrappedvalue","title":"var wrappedValue: ObjectType","type":"property"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Instance Methods","type":"groupMarker"},{"path":"\/documentation\/rex\/storeobject\/update()","title":"func update()","type":"method"}],"path":"\/documentation\/rex\/storeobject\/dynamicproperty-implementations","title":"DynamicProperty Implementations","type":"symbol"}],"path":"\/documentation\/rex\/storeobject","title":"StoreObject","type":"struct"},{"title":"Enumerations","type":"groupMarker"},{"children":[{"title":"Enumeration Cases","type":"groupMarker"},{"path":"\/documentation\/rex\/effectstrategy\/concurrent","title":"case concurrent","type":"case"},{"path":"\/documentation\/rex\/effectstrategy\/latestonly","title":"case latestOnly","type":"case"},{"path":"\/documentation\/rex\/effectstrategy\/sequential","title":"case sequential","type":"case"},{"title":"Default Implementations","type":"groupMarker"},{"children":[{"title":"Operators","type":"groupMarker"},{"path":"\/documentation\/rex\/effectstrategy\/!=(_:_:)","title":"static func != (Self, Self) -> Bool","type":"op"}],"path":"\/documentation\/rex\/effectstrategy\/equatable-implementations","title":"Equatable Implementations","type":"symbol"}],"path":"\/documentation\/rex\/effectstrategy","title":"EffectStrategy","type":"enum"}],"path":"\/documentation\/rex","title":"Rex","type":"module"}]},"schemaVersion":{"major":0,"minor":1,"patch":2}}