{"abstract":[{"text":"Learn how to integrate Swift-Rex with SwiftUI applications.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/Rex\/documentation\/Rex"]]},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift-Rex provides seamless integration with SwiftUI through the "},{"type":"codeVoice","code":"ObservableStore"},{"type":"text","text":" class and various property wrappers. This integration allows you to use Swift-Rex’s state management system while taking advantage of SwiftUI’s reactive UI framework."}]},{"text":"ObservableStore","type":"heading","anchor":"ObservableStore","level":2},{"text":"Basic Usage","type":"heading","anchor":"Basic-Usage","level":3},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ObservableStore"},{"type":"text","text":" is an "},{"type":"codeVoice","code":"ObservableObject"},{"type":"text","text":" that wraps a Swift-Rex "},{"type":"codeVoice","code":"Store"},{"type":"text","text":", making it compatible with SwiftUI’s reactive system."}]},{"code":["import SwiftUI","import Rex","","struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","","    var body: some View {","        VStack(spacing: 20) {","            Text(\"Count: \\(store.state.count)\")","                .font(.title)","","            HStack(spacing: 12) {","                Button(\"+1\") { store.send(.increment) }","                Button(\"-1\") { store.send(.decrement) }","            }","","            Button(\"Load Data\") {","                store.send(.loadData)","            }","            .disabled(store.state.isLoading)","        }","        .padding()","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Store Initialization","type":"heading","anchor":"Store-Initialization","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Create the store in your app’s entry point:"}]},{"code":["@main","struct MyApp: App {","    let store = Store(","        initialState: AppState(),","        reducer: AppReducer()","    ) {","        LoggingMiddleware()","    }","","    var body: some Scene {","        WindowGroup {","            ContentView(store: ObservableStore(store: store))","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Property Wrappers","type":"heading","anchor":"Property-Wrappers","level":2},{"text":"@StateObject","type":"heading","anchor":"StateObject","level":3},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"@StateObject"},{"type":"text","text":" for the root view that owns the store:"}],"type":"paragraph"},{"syntax":"swift","code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        \/\/ Your UI here","    }","}"],"type":"codeListing"},{"level":3,"text":"@ObservedObject","anchor":"ObservedObject","type":"heading"},{"inlineContent":[{"text":"Use ","type":"text"},{"code":"@ObservedObject","type":"codeVoice"},{"text":" for child views that receive the store:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct ChildView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Button(\"Increment\") {","            store.send(.increment)","        }","    }","}"],"type":"codeListing"},{"level":2,"text":"State Access","anchor":"State-Access","type":"heading"},{"level":3,"text":"Direct State Access","anchor":"Direct-State-Access","type":"heading"},{"inlineContent":[{"text":"Access state properties directly through the store:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct UserProfileView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        VStack {","            if let user = store.state.user {","                Text(\"Welcome, \\(user.name)\")","                Text(\"Email: \\(user.email)\")","            } else {","                Text(\"Please log in\")","            }","            ","            if store.state.isLoading {","                ProgressView()","            }","        }","    }","}"],"type":"codeListing"},{"level":3,"text":"Computed Properties","anchor":"Computed-Properties","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Use computed properties for derived state:","type":"text"}]},{"code":["struct TodoListView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    private var filteredTodos: [Todo] {","        switch store.state.todo.filter {","        case .all:","            return store.state.todo.todos","        case .completed:","            return store.state.todo.todos.filter { $0.isCompleted }","        case .incomplete:","            return store.state.todo.todos.filter { !$0.isCompleted }","        }","    }","    ","    var body: some View {","        List(filteredTodos, id: \\.id) { todo in","            TodoRowView(todo: todo) {","                store.send(.todo(.toggle(todo.id)))","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Action Dispatching","type":"heading","anchor":"Action-Dispatching","level":2},{"text":"Simple Actions","type":"heading","anchor":"Simple-Actions","level":3},{"type":"paragraph","inlineContent":[{"text":"Dispatch actions directly from UI events:","type":"text"}]},{"code":["Button(\"Increment\") {","    store.send(.increment)","}"],"type":"codeListing","syntax":"swift"},{"text":"Actions with Parameters","type":"heading","anchor":"Actions-with-Parameters","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Pass data to actions:"}]},{"code":["TextField(\"Todo title\", text: $todoText)","    .onSubmit {","        store.send(.todo(.add(todoText)))","        todoText = \"\"","    }"],"type":"codeListing","syntax":"swift"},{"text":"Conditional Actions","type":"heading","anchor":"Conditional-Actions","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dispatch actions based on conditions:"}]},{"code":["Button(\"Save\") {","    if store.state.user != nil {","        store.send(.saveUser)","    } else {","        store.send(.showError(\"User not found\"))","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Loading and Error States","type":"heading","anchor":"Loading-and-Error-States","level":2},{"text":"Loading States","type":"heading","anchor":"Loading-States","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Handle loading states in your UI:"}]},{"code":["struct DataView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Group {","            if store.state.isLoading {","                VStack {","                    ProgressView()","                    Text(\"Loading data...\")","                }","            } else {","                DataContentView(store: store)","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Error Handling","type":"heading","anchor":"Error-Handling","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Display and handle errors:"}]},{"code":["struct ErrorView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        Group {","            if let error = store.state.errorMessage {","                VStack {","                    Text(\"Error\")","                        .font(.headline)","                        .foregroundColor(.red)","                    ","                    Text(error)","                        .multilineTextAlignment(.center)","                    ","                    Button(\"Dismiss\") {","                        store.send(.clearError)","                    }","                }","                .padding()","                .background(Color(.systemGray6))","                .cornerRadius(10)","            }","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"text":"Event Bus Integration","type":"heading","anchor":"Event-Bus-Integration","level":2},{"anchor":"Subscribing-to-Events","type":"heading","level":3,"text":"Subscribing to Events"},{"type":"paragraph","inlineContent":[{"text":"Use the EventBus for cross-component communication:","type":"text"}]},{"type":"codeListing","code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    @State private var cancellables: Set<AnyCancellable> = []","    @State private var eventLog: [String] = []","    ","    var body: some View {","        VStack {","            \/\/ Your main UI","            MainView(store: store)","            ","            \/\/ Event log","            ScrollView {","                LazyVStack(alignment: .leading, spacing: 4) {","                    ForEach(eventLog, id: \\.self) { log in","                        Text(log)","                            .font(.caption)","                    }","                }","            }","            .frame(maxHeight: 200)","        }","        .onAppear {","            setupEventListeners()","        }","    }","    ","    private func setupEventListeners() {","        Task { @MainActor in","            store.getEventBus().subscribe { event in","                eventLog.insert(\"Event: \\(type(of: event))\", at: 0)","                if eventLog.count > 20 {","                    eventLog.removeLast()","                }","            }","            .store(in: &cancellables)","        }","    }","}"],"syntax":"swift"},{"anchor":"Publishing-Events","type":"heading","level":3,"text":"Publishing Events"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Publish events from your UI:"}]},{"type":"codeListing","code":["Button(\"Send Notification\") {","    Task { @MainActor in","        store.getEventBus().publish(","            NotificationEvent(","                title: \"User Action\",","                message: \"Button was tapped\"","            )","        )","    }","}"],"syntax":"swift"},{"anchor":"Custom-AppStore","type":"heading","level":2,"text":"Custom AppStore"},{"anchor":"Creating-a-Custom-Store","type":"heading","level":3,"text":"Creating a Custom Store"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more complex applications, you can create a custom "},{"type":"codeVoice","code":"AppStore"},{"type":"text","text":":"}]},{"type":"codeListing","code":["@MainActor","class AppStore: ObservableObject {","    @Published var state: AppState","    let store: Store<AppReducer>","","    init(store: Store<AppReducer>) {","        self.store = store","        self.state = store.state","","        store.subscribe { [weak self] newState in","            Task { @MainActor in","                self?.state = newState","            }","        }","    }","","    func send(_ action: AppAction) {","        store.dispatch(action)","    }","    ","    func getEventBus() -> EventBus {","        return store.getEventBus()","    }","}"],"syntax":"swift"},{"anchor":"Using-Custom-Store","type":"heading","level":3,"text":"Using Custom Store"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use your custom store in SwiftUI views:"}]},{"type":"codeListing","code":["struct ContentView: View {","    @ObservedObject var store: AppStore","    ","    var body: some View {","        VStack {","            Text(\"Count: \\(store.state.count)\")","            Button(\"Increment\") {","                store.send(.increment)","            }","        }","    }","}"],"syntax":"swift"},{"anchor":"Best-Practices","type":"heading","level":2,"text":"Best Practices"},{"anchor":"1-Use-StateObject-for-Root-Views","type":"heading","level":3,"text":"1. Use @StateObject for Root Views"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Always use "},{"code":"@StateObject","type":"codeVoice"},{"type":"text","text":" for views that own the store:"}]},{"type":"codeListing","code":["struct ContentView: View {","    @StateObject var store: ObservableStore<AppReducer>","    \/\/ ...","}"],"syntax":"swift"},{"anchor":"2-Use-ObservedObject-for-Child-Views","type":"heading","level":3,"text":"2. Use @ObservedObject for Child Views"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"@ObservedObject"},{"type":"text","text":" for views that receive the store:"}]},{"type":"codeListing","code":["struct ChildView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    \/\/ ...","}"],"syntax":"swift"},{"anchor":"3-Keep-Views-Focused","type":"heading","level":3,"text":"3. Keep Views Focused"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Don’t pass the entire store to every view. Only pass what’s needed:"}]},{"type":"codeListing","code":["\/\/ ❌ Don't pass entire store","struct TodoRowView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    var body: some View {","        \/\/ Access store.state.todo.todos[index]","    }","}","","\/\/ ✅ Pass only what's needed","struct TodoRowView: View {","    let todo: Todo","    let onToggle: () -> Void","    ","    var body: some View {","        HStack {","            Text(todo.title)","            Spacer()","            Button(\"Toggle\") {","                onToggle()","            }","        }","    }","}"],"syntax":"swift"},{"anchor":"4-Use-Computed-Properties","type":"heading","level":3,"text":"4. Use Computed Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use computed properties for derived state:"}]},{"type":"codeListing","code":["struct TodoListView: View {","    @ObservedObject var store: ObservableStore<AppReducer>","    ","    private var completedTodos: [Todo] {","        store.state.todo.todos.filter { $0.isCompleted }","    }","    ","    var body: some View {","        List(completedTodos, id: \\.id) { todo in","            TodoRowView(todo: todo)","        }","    }","}"],"syntax":"swift"},{"anchor":"5-Handle-Loading-States","type":"heading","level":3,"text":"5. Handle Loading States"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Always provide loading indicators:"}]},{"type":"codeListing","code":["if store.state.isLoading {","    ProgressView(\"Loading...\")","} else {","    \/\/ Your content","}"],"syntax":"swift"},{"anchor":"6-Manage-Event-Bus-Subscriptions","type":"heading","level":3,"text":"6. Manage Event Bus Subscriptions"},{"type":"paragraph","inlineContent":[{"text":"Always store cancellables to prevent memory leaks:","type":"text"}]},{"type":"codeListing","code":["@State private var cancellables: Set<AnyCancellable> = []","","store.getEventBus().subscribe { event in","    \/\/ Handle event","}",".store(in: &cancellables)"],"syntax":"swift"},{"anchor":"Next-Steps","type":"heading","level":2,"text":"Next Steps"},{"type":"paragraph","inlineContent":[{"text":"Now that you understand SwiftUI integration, explore:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:UIKitIntegration","type":"text"},{"text":" - Learn about UIKit integration","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Rex\/documentation\/Rex\/EventBus","isActive":true},{"text":" - Explore cross-component communication","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/Rex\/documentation\/Rex\/Middleware","isActive":true},{"type":"text","text":" - Add logging and analytics"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"doc:BestPractices","type":"text"},{"text":" - Advanced patterns and tips","type":"text"}]}]}]}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/Rex\/documentation\/Rex\/SwiftUIIntegration","interfaceLanguage":"swift"},"metadata":{"modules":[{"name":"Rex"}],"role":"article","roleHeading":"Article","title":"SwiftUI Integration"},"kind":"article","sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/rex\/swiftuiintegration"]}],"references":{"doc://Rex/documentation/Rex/EventBus":{"title":"EventBus","abstract":[],"kind":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventBus","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/rex\/eventbus","navigatorTitle":[{"text":"EventBus","kind":"identifier"}],"identifier":"doc:\/\/Rex\/documentation\/Rex\/EventBus"},"doc://Rex/documentation/Rex/Middleware":{"kind":"symbol","navigatorTitle":[{"text":"Middleware","kind":"identifier"}],"url":"\/documentation\/rex\/middleware","identifier":"doc:\/\/Rex\/documentation\/Rex\/Middleware","role":"symbol","type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Middleware","kind":"identifier"}],"title":"Middleware","abstract":[]},"doc://Rex/documentation/Rex":{"role":"collection","type":"topic","title":"Rex","abstract":[],"kind":"symbol","identifier":"doc:\/\/Rex\/documentation\/Rex","url":"\/documentation\/rex"}}}